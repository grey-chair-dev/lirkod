"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_mock-amps-server_ts";
exports.ids = ["_ssr_lib_mock-amps-server_ts"];
exports.modules = {

/***/ "(ssr)/./lib/mock-amps-server.ts":
/*!*********************************!*\
  !*** ./lib/mock-amps-server.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockAmpsServer: () => (/* binding */ MockAmpsServer),\n/* harmony export */   mockAmpsServer: () => (/* binding */ mockAmpsServer)\n/* harmony export */ });\n// Mock AMPS Server for Development and Testing\n// This simulates a real AMPS system for development purposes\nclass MockAmpsServer {\n    constructor(){\n        this.sessions = new Map();\n        this.currentSessionId = null;\n        this.isConnected = false;\n        this.systemStatus = {\n            connected: false,\n            version: \"1.0.0-mock\",\n            hardware: {\n                audio: \"connected\",\n                network: \"connected\",\n                storage: \"available\"\n            },\n            sessions: {\n                active: 0,\n                total: 0\n            },\n            lastHeartbeat: new Date().toISOString()\n        };\n    }\n    // Simulate API endpoints\n    async handleRequest(endpoint, method, body) {\n        console.log(`Mock AMPS API: ${method} ${endpoint}`);\n        switch(endpoint){\n            case \"/api/connect\":\n                return this.handleConnect(body);\n            case \"/api/disconnect\":\n                return this.handleDisconnect();\n            case \"/api/status\":\n                return this.handleGetStatus();\n            case \"/api/heartbeat\":\n                return this.handleHeartbeat();\n            case \"/api/sessions\":\n                if (method === \"POST\") {\n                    return this.handleCreateSession(body);\n                }\n                return this.handleGetSessions();\n            case \"/api/sessions/current\":\n                return this.handleGetCurrentSession();\n            case \"/api/sessions/leave\":\n                return this.handleLeaveSession();\n            case \"/api/sessions/control\":\n                return this.handleControlPlayback(body);\n            case \"/api/sessions/seek\":\n                return this.handleSeek(body);\n            case \"/api/sessions/volume\":\n                return this.handleSetVolume(body);\n            case \"/api/sessions/queue\":\n                if (method === \"POST\") {\n                    return this.handleAddToQueue(body);\n                }\n                return this.handleGetQueue();\n            case \"/api/content/search\":\n                return this.handleSearchContent(endpoint);\n            default:\n                if (endpoint.startsWith(\"/api/sessions/\") && endpoint.includes(\"/join\")) {\n                    const sessionId = endpoint.split(\"/\")[3];\n                    return this.handleJoinSession(sessionId);\n                }\n                if (endpoint.startsWith(\"/api/sessions/queue/\") && method === \"DELETE\") {\n                    const queueItemId = endpoint.split(\"/\")[4];\n                    return this.handleRemoveFromQueue(queueItemId);\n                }\n                if (endpoint.startsWith(\"/api/content/\")) {\n                    const contentId = endpoint.split(\"/\")[3];\n                    return this.handleGetContent(contentId);\n                }\n                throw new Error(`Unknown endpoint: ${endpoint}`);\n        }\n    }\n    async handleConnect(body) {\n        this.isConnected = true;\n        this.systemStatus.connected = true;\n        this.startHeartbeat();\n        return {\n            success: true,\n            data: {\n                clientId: \"mock-client-\" + Date.now(),\n                capabilities: body.capabilities || []\n            }\n        };\n    }\n    async handleDisconnect() {\n        this.isConnected = false;\n        this.systemStatus.connected = false;\n        this.currentSessionId = null;\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval);\n            this.heartbeatInterval = undefined;\n        }\n        return {\n            success: true\n        };\n    }\n    async handleGetStatus() {\n        this.systemStatus.lastHeartbeat = new Date().toISOString();\n        this.systemStatus.sessions.active = this.sessions.size;\n        this.systemStatus.sessions.total = this.sessions.size;\n        return {\n            data: this.systemStatus\n        };\n    }\n    async handleHeartbeat() {\n        this.systemStatus.lastHeartbeat = new Date().toISOString();\n        return {\n            success: true\n        };\n    }\n    async handleCreateSession(body) {\n        const sessionId = \"session-\" + Date.now();\n        const session = {\n            id: sessionId,\n            name: body.name || \"New Session\",\n            status: \"active\",\n            participants: 1,\n            queue: [],\n            settings: {\n                volume: 80,\n                shuffle: false,\n                repeat: false,\n                ...body.settings\n            },\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        this.sessions.set(sessionId, session);\n        this.currentSessionId = sessionId;\n        return {\n            data: session\n        };\n    }\n    async handleJoinSession(sessionId) {\n        const session = this.sessions.get(sessionId);\n        if (!session) {\n            throw new Error(\"Session not found\");\n        }\n        session.participants++;\n        session.updatedAt = new Date().toISOString();\n        this.currentSessionId = sessionId;\n        return {\n            data: session\n        };\n    }\n    async handleGetCurrentSession() {\n        if (!this.currentSessionId) {\n            return {\n                data: null\n            };\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        return {\n            data: session || null\n        };\n    }\n    async handleLeaveSession() {\n        if (this.currentSessionId) {\n            const session = this.sessions.get(this.currentSessionId);\n            if (session) {\n                session.participants = Math.max(0, session.participants - 1);\n                session.updatedAt = new Date().toISOString();\n            }\n            this.currentSessionId = null;\n        }\n        return {\n            success: true\n        };\n    }\n    async handleControlPlayback(body) {\n        if (!this.currentSessionId) {\n            throw new Error(\"No active session\");\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        if (!session) {\n            throw new Error(\"Session not found\");\n        }\n        switch(body.action){\n            case \"play\":\n                session.status = \"active\";\n                if (!session.currentTrack && session.queue.length > 0) {\n                    const nextTrack = session.queue[0];\n                    session.currentTrack = {\n                        id: nextTrack.id,\n                        title: nextTrack.title,\n                        artist: nextTrack.artist,\n                        duration: nextTrack.duration,\n                        position: 0\n                    };\n                }\n                break;\n            case \"pause\":\n                session.status = \"paused\";\n                break;\n            case \"stop\":\n                session.status = \"inactive\";\n                session.currentTrack = undefined;\n                break;\n            case \"next\":\n                if (session.queue.length > 0) {\n                    const nextTrack = session.queue[0];\n                    session.currentTrack = {\n                        id: nextTrack.id,\n                        title: nextTrack.title,\n                        artist: nextTrack.artist,\n                        duration: nextTrack.duration,\n                        position: 0\n                    };\n                    session.queue.shift();\n                }\n                break;\n            case \"previous\":\n                // Simple implementation - just restart current track\n                if (session.currentTrack) {\n                    session.currentTrack.position = 0;\n                }\n                break;\n        }\n        session.updatedAt = new Date().toISOString();\n        return {\n            success: true\n        };\n    }\n    async handleSeek(body) {\n        if (!this.currentSessionId) {\n            throw new Error(\"No active session\");\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        if (!session || !session.currentTrack) {\n            throw new Error(\"No active track\");\n        }\n        session.currentTrack.position = Math.max(0, Math.min(body.position, session.currentTrack.duration));\n        session.updatedAt = new Date().toISOString();\n        return {\n            success: true\n        };\n    }\n    async handleSetVolume(body) {\n        if (!this.currentSessionId) {\n            throw new Error(\"No active session\");\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        if (!session) {\n            throw new Error(\"Session not found\");\n        }\n        session.settings.volume = Math.max(0, Math.min(100, body.volume));\n        session.updatedAt = new Date().toISOString();\n        return {\n            success: true\n        };\n    }\n    async handleAddToQueue(body) {\n        if (!this.currentSessionId) {\n            throw new Error(\"No active session\");\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        if (!session) {\n            throw new Error(\"Session not found\");\n        }\n        const queueItem = {\n            id: \"queue-\" + Date.now(),\n            contentId: body.contentId,\n            title: `Track ${body.contentId}`,\n            artist: \"Mock Artist\",\n            duration: 180,\n            addedBy: \"mock-user\",\n            addedAt: new Date().toISOString(),\n            priority: body.priority || 0\n        };\n        session.queue.push(queueItem);\n        session.updatedAt = new Date().toISOString();\n        return {\n            data: queueItem\n        };\n    }\n    async handleGetQueue() {\n        if (!this.currentSessionId) {\n            return {\n                data: []\n            };\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        return {\n            data: session?.queue || []\n        };\n    }\n    async handleRemoveFromQueue(queueItemId) {\n        if (!this.currentSessionId) {\n            throw new Error(\"No active session\");\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        if (!session) {\n            throw new Error(\"Session not found\");\n        }\n        session.queue = session.queue.filter((item)=>item.id !== queueItemId);\n        session.updatedAt = new Date().toISOString();\n        return {\n            success: true\n        };\n    }\n    async handleSearchContent(endpoint) {\n        const url = new URL(\"http://localhost\" + endpoint);\n        const query = url.searchParams.get(\"q\") || \"\";\n        const limit = parseInt(url.searchParams.get(\"limit\") || \"50\");\n        // Mock search results\n        const results = Array.from({\n            length: Math.min(limit, 10)\n        }, (_, i)=>({\n                id: `content-${i + 1}`,\n                title: `Mock Track ${i + 1}`,\n                artist: `Mock Artist ${i + 1}`,\n                duration: 120 + i * 30,\n                audioUrl: `/mock-audio/track-${i + 1}.mp3`,\n                metadata: {\n                    genre: [\n                        \"Pop\",\n                        \"Rock\",\n                        \"Electronic\"\n                    ][i % 3],\n                    year: 2020 + i % 4,\n                    bpm: 120 + i * 10,\n                    key: [\n                        \"C\",\n                        \"D\",\n                        \"E\",\n                        \"F\",\n                        \"G\"\n                    ][i % 5]\n                }\n            }));\n        return {\n            data: results\n        };\n    }\n    async handleGetContent(contentId) {\n        return {\n            data: {\n                id: contentId,\n                title: `Mock Track ${contentId}`,\n                artist: \"Mock Artist\",\n                duration: 180,\n                audioUrl: `/mock-audio/${contentId}.mp3`,\n                metadata: {\n                    genre: \"Pop\",\n                    year: 2023,\n                    bpm: 120,\n                    key: \"C\"\n                }\n            }\n        };\n    }\n    startHeartbeat() {\n        this.heartbeatInterval = setInterval(()=>{\n            this.systemStatus.lastHeartbeat = new Date().toISOString();\n        }, 30000);\n    }\n    // Simulate track progression\n    startTrackProgression() {\n        setInterval(()=>{\n            if (this.currentSessionId) {\n                const session = this.sessions.get(this.currentSessionId);\n                if (session?.currentTrack && session.status === \"active\") {\n                    session.currentTrack.position += 1;\n                    if (session.currentTrack.position >= session.currentTrack.duration) {\n                        // Track finished, play next\n                        if (session.queue.length > 0) {\n                            const nextTrack = session.queue.shift();\n                            session.currentTrack = {\n                                id: nextTrack.id,\n                                title: nextTrack.title,\n                                artist: nextTrack.artist,\n                                duration: nextTrack.duration,\n                                position: 0\n                            };\n                        } else {\n                            session.currentTrack = undefined;\n                            session.status = \"inactive\";\n                        }\n                    }\n                    session.updatedAt = new Date().toISOString();\n                }\n            }\n        }, 1000) // Update every second\n        ;\n    }\n}\n// Export singleton instance\nconst mockAmpsServer = new MockAmpsServer();\n// Start track progression simulation\nmockAmpsServer.startTrackProgression();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLLFVBQVU7b0JBQ3hESCxRQUFRaUIsWUFBWSxDQUFDTSxRQUFRLElBQUk7b0JBQ2pDLElBQUl2QixRQUFRaUIsWUFBWSxDQUFDTSxRQUFRLElBQUl2QixRQUFRaUIsWUFBWSxDQUFDSyxRQUFRLEVBQUU7d0JBQ2xFLDRCQUE0Qjt3QkFDNUIsSUFBSXRCLFFBQVFLLEtBQUssQ0FBQ2EsTUFBTSxHQUFHLEdBQUc7NEJBQzVCLE1BQU1DLFlBQVluQixRQUFRSyxLQUFLLENBQUNtQixLQUFLOzRCQUNyQ3hCLFFBQVFpQixZQUFZLEdBQUc7Z0NBQ3JCaEIsSUFBSWtCLFVBQVVsQixFQUFFO2dDQUNoQm1CLE9BQU9ELFVBQVVDLEtBQUs7Z0NBQ3RCQyxRQUFRRixVQUFVRSxNQUFNO2dDQUN4QkMsVUFBVUgsVUFBVUcsUUFBUTtnQ0FDNUJDLFVBQVU7NEJBQ1o7d0JBQ0YsT0FBTzs0QkFDTHZCLFFBQVFpQixZQUFZLEdBQUduQjs0QkFDdkJFLFFBQVFHLE1BQU0sR0FBRzt3QkFDbkI7b0JBQ0Y7b0JBQ0FILFFBQVFXLFNBQVMsR0FBRyxJQUFJckQsT0FBT0MsV0FBVztnQkFDNUM7WUFDRjtRQUNGLEdBQUcsTUFBTSxzQkFBc0I7O0lBQ2pDO0FBQ0Y7QUFFQSw0QkFBNEI7QUFDckIsTUFBTTZGLGlCQUFpQixJQUFJOUcsaUJBQWdCO0FBRWxELHFDQUFxQztBQUNyQzhHLGVBQWVELHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FtcHMtY29tcGFuaW9uLy4vbGliL21vY2stYW1wcy1zZXJ2ZXIudHM/MTZmZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2NrIEFNUFMgU2VydmVyIGZvciBEZXZlbG9wbWVudCBhbmQgVGVzdGluZ1xuLy8gVGhpcyBzaW11bGF0ZXMgYSByZWFsIEFNUFMgc3lzdGVtIGZvciBkZXZlbG9wbWVudCBwdXJwb3Nlc1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vY2tBbXBzU2Vzc2lvbiB7XG4gIGlkOiBzdHJpbmdcbiAgbmFtZTogc3RyaW5nXG4gIHN0YXR1czogJ2FjdGl2ZScgfCAnaW5hY3RpdmUnIHwgJ3BhdXNlZCcgfCAnZXJyb3InXG4gIGN1cnJlbnRUcmFjaz86IHtcbiAgICBpZDogc3RyaW5nXG4gICAgdGl0bGU6IHN0cmluZ1xuICAgIGFydGlzdDogc3RyaW5nXG4gICAgZHVyYXRpb246IG51bWJlclxuICAgIHBvc2l0aW9uOiBudW1iZXJcbiAgfVxuICBwYXJ0aWNpcGFudHM6IG51bWJlclxuICBxdWV1ZTogQXJyYXk8e1xuICAgIGlkOiBzdHJpbmdcbiAgICBjb250ZW50SWQ6IHN0cmluZ1xuICAgIHRpdGxlOiBzdHJpbmdcbiAgICBhcnRpc3Q6IHN0cmluZ1xuICAgIGR1cmF0aW9uOiBudW1iZXJcbiAgICBhZGRlZEJ5OiBzdHJpbmdcbiAgICBhZGRlZEF0OiBzdHJpbmdcbiAgICBwcmlvcml0eTogbnVtYmVyXG4gIH0+XG4gIHNldHRpbmdzOiB7XG4gICAgdm9sdW1lOiBudW1iZXJcbiAgICBzaHVmZmxlOiBib29sZWFuXG4gICAgcmVwZWF0OiBib29sZWFuXG4gIH1cbiAgY3JlYXRlZEF0OiBzdHJpbmdcbiAgdXBkYXRlZEF0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2NrQW1wc1N5c3RlbVN0YXR1cyB7XG4gIGNvbm5lY3RlZDogYm9vbGVhblxuICB2ZXJzaW9uOiBzdHJpbmdcbiAgaGFyZHdhcmU6IHtcbiAgICBhdWRpbzogJ2Nvbm5lY3RlZCcgfCAnZGlzY29ubmVjdGVkJyB8ICdlcnJvcidcbiAgICBuZXR3b3JrOiAnY29ubmVjdGVkJyB8ICdkaXNjb25uZWN0ZWQnIHwgJ2Vycm9yJ1xuICAgIHN0b3JhZ2U6ICdhdmFpbGFibGUnIHwgJ2xvdycgfCAnZXJyb3InXG4gIH1cbiAgc2Vzc2lvbnM6IHtcbiAgICBhY3RpdmU6IG51bWJlclxuICAgIHRvdGFsOiBudW1iZXJcbiAgfVxuICBsYXN0SGVhcnRiZWF0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGNsYXNzIE1vY2tBbXBzU2VydmVyIHtcbiAgcHJpdmF0ZSBzZXNzaW9uczogTWFwPHN0cmluZywgTW9ja0FtcHNTZXNzaW9uPiA9IG5ldyBNYXAoKVxuICBwcml2YXRlIGN1cnJlbnRTZXNzaW9uSWQ6IHN0cmluZyB8IG51bGwgPSBudWxsXG4gIHByaXZhdGUgc3lzdGVtU3RhdHVzOiBNb2NrQW1wc1N5c3RlbVN0YXR1c1xuICBwcml2YXRlIGlzQ29ubmVjdGVkOiBib29sZWFuID0gZmFsc2VcbiAgcHJpdmF0ZSBoZWFydGJlYXRJbnRlcnZhbD86IE5vZGVKUy5UaW1lb3V0XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zeXN0ZW1TdGF0dXMgPSB7XG4gICAgICBjb25uZWN0ZWQ6IGZhbHNlLFxuICAgICAgdmVyc2lvbjogJzEuMC4wLW1vY2snLFxuICAgICAgaGFyZHdhcmU6IHtcbiAgICAgICAgYXVkaW86ICdjb25uZWN0ZWQnLFxuICAgICAgICBuZXR3b3JrOiAnY29ubmVjdGVkJyxcbiAgICAgICAgc3RvcmFnZTogJ2F2YWlsYWJsZSdcbiAgICAgIH0sXG4gICAgICBzZXNzaW9uczoge1xuICAgICAgICBhY3RpdmU6IDAsXG4gICAgICAgIHRvdGFsOiAwXG4gICAgICB9LFxuICAgICAgbGFzdEhlYXJ0YmVhdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfVxuICB9XG5cbiAgLy8gU2ltdWxhdGUgQVBJIGVuZHBvaW50c1xuICBhc3luYyBoYW5kbGVSZXF1ZXN0KGVuZHBvaW50OiBzdHJpbmcsIG1ldGhvZDogc3RyaW5nLCBib2R5PzogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zb2xlLmxvZyhgTW9jayBBTVBTIEFQSTogJHttZXRob2R9ICR7ZW5kcG9pbnR9YClcblxuICAgIHN3aXRjaCAoZW5kcG9pbnQpIHtcbiAgICAgIGNhc2UgJy9hcGkvY29ubmVjdCc6XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUNvbm5lY3QoYm9keSlcbiAgICAgIFxuICAgICAgY2FzZSAnL2FwaS9kaXNjb25uZWN0JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlRGlzY29ubmVjdCgpXG4gICAgICBcbiAgICAgIGNhc2UgJy9hcGkvc3RhdHVzJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlR2V0U3RhdHVzKClcbiAgICAgIFxuICAgICAgY2FzZSAnL2FwaS9oZWFydGJlYXQnOlxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVIZWFydGJlYXQoKVxuICAgICAgXG4gICAgICBjYXNlICcvYXBpL3Nlc3Npb25zJzpcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ1BPU1QnKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlQ3JlYXRlU2Vzc2lvbihib2R5KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUdldFNlc3Npb25zKClcbiAgICAgIFxuICAgICAgY2FzZSAnL2FwaS9zZXNzaW9ucy9jdXJyZW50JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlR2V0Q3VycmVudFNlc3Npb24oKVxuICAgICAgXG4gICAgICBjYXNlICcvYXBpL3Nlc3Npb25zL2xlYXZlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlTGVhdmVTZXNzaW9uKClcbiAgICAgIFxuICAgICAgY2FzZSAnL2FwaS9zZXNzaW9ucy9jb250cm9sJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlQ29udHJvbFBsYXliYWNrKGJvZHkpXG4gICAgICBcbiAgICAgIGNhc2UgJy9hcGkvc2Vzc2lvbnMvc2Vlayc6XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVNlZWsoYm9keSlcbiAgICAgIFxuICAgICAgY2FzZSAnL2FwaS9zZXNzaW9ucy92b2x1bWUnOlxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVTZXRWb2x1bWUoYm9keSlcbiAgICAgIFxuICAgICAgY2FzZSAnL2FwaS9zZXNzaW9ucy9xdWV1ZSc6XG4gICAgICAgIGlmIChtZXRob2QgPT09ICdQT1NUJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUFkZFRvUXVldWUoYm9keSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVHZXRRdWV1ZSgpXG4gICAgICBcbiAgICAgIGNhc2UgJy9hcGkvY29udGVudC9zZWFyY2gnOlxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVTZWFyY2hDb250ZW50KGVuZHBvaW50KVxuICAgICAgXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoZW5kcG9pbnQuc3RhcnRzV2l0aCgnL2FwaS9zZXNzaW9ucy8nKSAmJiBlbmRwb2ludC5pbmNsdWRlcygnL2pvaW4nKSkge1xuICAgICAgICAgIGNvbnN0IHNlc3Npb25JZCA9IGVuZHBvaW50LnNwbGl0KCcvJylbM11cbiAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVKb2luU2Vzc2lvbihzZXNzaW9uSWQpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZHBvaW50LnN0YXJ0c1dpdGgoJy9hcGkvc2Vzc2lvbnMvcXVldWUvJykgJiYgbWV0aG9kID09PSAnREVMRVRFJykge1xuICAgICAgICAgIGNvbnN0IHF1ZXVlSXRlbUlkID0gZW5kcG9pbnQuc3BsaXQoJy8nKVs0XVxuICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVJlbW92ZUZyb21RdWV1ZShxdWV1ZUl0ZW1JZClcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kcG9pbnQuc3RhcnRzV2l0aCgnL2FwaS9jb250ZW50LycpKSB7XG4gICAgICAgICAgY29uc3QgY29udGVudElkID0gZW5kcG9pbnQuc3BsaXQoJy8nKVszXVxuICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUdldENvbnRlbnQoY29udGVudElkKVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBlbmRwb2ludDogJHtlbmRwb2ludH1gKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlQ29ubmVjdChib2R5OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHRoaXMuaXNDb25uZWN0ZWQgPSB0cnVlXG4gICAgdGhpcy5zeXN0ZW1TdGF0dXMuY29ubmVjdGVkID0gdHJ1ZVxuICAgIHRoaXMuc3RhcnRIZWFydGJlYXQoKVxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgZGF0YToge1xuICAgICAgICBjbGllbnRJZDogJ21vY2stY2xpZW50LScgKyBEYXRlLm5vdygpLFxuICAgICAgICBjYXBhYmlsaXRpZXM6IGJvZHkuY2FwYWJpbGl0aWVzIHx8IFtdXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVEaXNjb25uZWN0KCk6IFByb21pc2U8YW55PiB7XG4gICAgdGhpcy5pc0Nvbm5lY3RlZCA9IGZhbHNlXG4gICAgdGhpcy5zeXN0ZW1TdGF0dXMuY29ubmVjdGVkID0gZmFsc2VcbiAgICB0aGlzLmN1cnJlbnRTZXNzaW9uSWQgPSBudWxsXG4gICAgXG4gICAgaWYgKHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5oZWFydGJlYXRJbnRlcnZhbClcbiAgICAgIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWwgPSB1bmRlZmluZWRcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZUdldFN0YXR1cygpOiBQcm9taXNlPGFueT4ge1xuICAgIHRoaXMuc3lzdGVtU3RhdHVzLmxhc3RIZWFydGJlYXQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB0aGlzLnN5c3RlbVN0YXR1cy5zZXNzaW9ucy5hY3RpdmUgPSB0aGlzLnNlc3Npb25zLnNpemVcbiAgICB0aGlzLnN5c3RlbVN0YXR1cy5zZXNzaW9ucy50b3RhbCA9IHRoaXMuc2Vzc2lvbnMuc2l6ZVxuICAgIFxuICAgIHJldHVybiB7IGRhdGE6IHRoaXMuc3lzdGVtU3RhdHVzIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlSGVhcnRiZWF0KCk6IFByb21pc2U8YW55PiB7XG4gICAgdGhpcy5zeXN0ZW1TdGF0dXMubGFzdEhlYXJ0YmVhdCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVDcmVhdGVTZXNzaW9uKGJvZHk6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3Qgc2Vzc2lvbklkID0gJ3Nlc3Npb24tJyArIERhdGUubm93KClcbiAgICBjb25zdCBzZXNzaW9uOiBNb2NrQW1wc1Nlc3Npb24gPSB7XG4gICAgICBpZDogc2Vzc2lvbklkLFxuICAgICAgbmFtZTogYm9keS5uYW1lIHx8ICdOZXcgU2Vzc2lvbicsXG4gICAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgICAgcGFydGljaXBhbnRzOiAxLFxuICAgICAgcXVldWU6IFtdLFxuICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgdm9sdW1lOiA4MCxcbiAgICAgICAgc2h1ZmZsZTogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIC4uLmJvZHkuc2V0dGluZ3NcbiAgICAgIH0sXG4gICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfVxuICAgIFxuICAgIHRoaXMuc2Vzc2lvbnMuc2V0KHNlc3Npb25JZCwgc2Vzc2lvbilcbiAgICB0aGlzLmN1cnJlbnRTZXNzaW9uSWQgPSBzZXNzaW9uSWRcbiAgICBcbiAgICByZXR1cm4geyBkYXRhOiBzZXNzaW9uIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlSm9pblNlc3Npb24oc2Vzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb25zLmdldChzZXNzaW9uSWQpXG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nlc3Npb24gbm90IGZvdW5kJylcbiAgICB9XG4gICAgXG4gICAgc2Vzc2lvbi5wYXJ0aWNpcGFudHMrK1xuICAgIHNlc3Npb24udXBkYXRlZEF0ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgdGhpcy5jdXJyZW50U2Vzc2lvbklkID0gc2Vzc2lvbklkXG4gICAgXG4gICAgcmV0dXJuIHsgZGF0YTogc2Vzc2lvbiB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZUdldEN1cnJlbnRTZXNzaW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRTZXNzaW9uSWQpIHtcbiAgICAgIHJldHVybiB7IGRhdGE6IG51bGwgfVxuICAgIH1cbiAgICBcbiAgICBjb25zdCBzZXNzaW9uID0gdGhpcy5zZXNzaW9ucy5nZXQodGhpcy5jdXJyZW50U2Vzc2lvbklkKVxuICAgIHJldHVybiB7IGRhdGE6IHNlc3Npb24gfHwgbnVsbCB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZUxlYXZlU2Vzc2lvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICh0aGlzLmN1cnJlbnRTZXNzaW9uSWQpIHtcbiAgICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb25zLmdldCh0aGlzLmN1cnJlbnRTZXNzaW9uSWQpXG4gICAgICBpZiAoc2Vzc2lvbikge1xuICAgICAgICBzZXNzaW9uLnBhcnRpY2lwYW50cyA9IE1hdGgubWF4KDAsIHNlc3Npb24ucGFydGljaXBhbnRzIC0gMSlcbiAgICAgICAgc2Vzc2lvbi51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH1cbiAgICAgIHRoaXMuY3VycmVudFNlc3Npb25JZCA9IG51bGxcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZUNvbnRyb2xQbGF5YmFjayhib2R5OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICghdGhpcy5jdXJyZW50U2Vzc2lvbklkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFjdGl2ZSBzZXNzaW9uJylcbiAgICB9XG4gICAgXG4gICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnMuZ2V0KHRoaXMuY3VycmVudFNlc3Npb25JZClcbiAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2Vzc2lvbiBub3QgZm91bmQnKVxuICAgIH1cbiAgICBcbiAgICBzd2l0Y2ggKGJvZHkuYWN0aW9uKSB7XG4gICAgICBjYXNlICdwbGF5JzpcbiAgICAgICAgc2Vzc2lvbi5zdGF0dXMgPSAnYWN0aXZlJ1xuICAgICAgICBpZiAoIXNlc3Npb24uY3VycmVudFRyYWNrICYmIHNlc3Npb24ucXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IG5leHRUcmFjayA9IHNlc3Npb24ucXVldWVbMF1cbiAgICAgICAgICBzZXNzaW9uLmN1cnJlbnRUcmFjayA9IHtcbiAgICAgICAgICAgIGlkOiBuZXh0VHJhY2suaWQsXG4gICAgICAgICAgICB0aXRsZTogbmV4dFRyYWNrLnRpdGxlLFxuICAgICAgICAgICAgYXJ0aXN0OiBuZXh0VHJhY2suYXJ0aXN0LFxuICAgICAgICAgICAgZHVyYXRpb246IG5leHRUcmFjay5kdXJhdGlvbixcbiAgICAgICAgICAgIHBvc2l0aW9uOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdwYXVzZSc6XG4gICAgICAgIHNlc3Npb24uc3RhdHVzID0gJ3BhdXNlZCdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3N0b3AnOlxuICAgICAgICBzZXNzaW9uLnN0YXR1cyA9ICdpbmFjdGl2ZSdcbiAgICAgICAgc2Vzc2lvbi5jdXJyZW50VHJhY2sgPSB1bmRlZmluZWRcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICBpZiAoc2Vzc2lvbi5xdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgbmV4dFRyYWNrID0gc2Vzc2lvbi5xdWV1ZVswXVxuICAgICAgICAgIHNlc3Npb24uY3VycmVudFRyYWNrID0ge1xuICAgICAgICAgICAgaWQ6IG5leHRUcmFjay5pZCxcbiAgICAgICAgICAgIHRpdGxlOiBuZXh0VHJhY2sudGl0bGUsXG4gICAgICAgICAgICBhcnRpc3Q6IG5leHRUcmFjay5hcnRpc3QsXG4gICAgICAgICAgICBkdXJhdGlvbjogbmV4dFRyYWNrLmR1cmF0aW9uLFxuICAgICAgICAgICAgcG9zaXRpb246IDBcbiAgICAgICAgICB9XG4gICAgICAgICAgc2Vzc2lvbi5xdWV1ZS5zaGlmdCgpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcbiAgICAgICAgLy8gU2ltcGxlIGltcGxlbWVudGF0aW9uIC0ganVzdCByZXN0YXJ0IGN1cnJlbnQgdHJhY2tcbiAgICAgICAgaWYgKHNlc3Npb24uY3VycmVudFRyYWNrKSB7XG4gICAgICAgICAgc2Vzc2lvbi5jdXJyZW50VHJhY2sucG9zaXRpb24gPSAwXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgXG4gICAgc2Vzc2lvbi51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlU2Vlayhib2R5OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICghdGhpcy5jdXJyZW50U2Vzc2lvbklkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFjdGl2ZSBzZXNzaW9uJylcbiAgICB9XG4gICAgXG4gICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnMuZ2V0KHRoaXMuY3VycmVudFNlc3Npb25JZClcbiAgICBpZiAoIXNlc3Npb24gfHwgIXNlc3Npb24uY3VycmVudFRyYWNrKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFjdGl2ZSB0cmFjaycpXG4gICAgfVxuICAgIFxuICAgIHNlc3Npb24uY3VycmVudFRyYWNrLnBvc2l0aW9uID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oYm9keS5wb3NpdGlvbiwgc2Vzc2lvbi5jdXJyZW50VHJhY2suZHVyYXRpb24pKVxuICAgIHNlc3Npb24udXBkYXRlZEF0ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgXG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZVNldFZvbHVtZShib2R5OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICghdGhpcy5jdXJyZW50U2Vzc2lvbklkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFjdGl2ZSBzZXNzaW9uJylcbiAgICB9XG4gICAgXG4gICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnMuZ2V0KHRoaXMuY3VycmVudFNlc3Npb25JZClcbiAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2Vzc2lvbiBub3QgZm91bmQnKVxuICAgIH1cbiAgICBcbiAgICBzZXNzaW9uLnNldHRpbmdzLnZvbHVtZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEwMCwgYm9keS52b2x1bWUpKVxuICAgIHNlc3Npb24udXBkYXRlZEF0ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgXG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZUFkZFRvUXVldWUoYm9keTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAoIXRoaXMuY3VycmVudFNlc3Npb25JZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBhY3RpdmUgc2Vzc2lvbicpXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb25zLmdldCh0aGlzLmN1cnJlbnRTZXNzaW9uSWQpXG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nlc3Npb24gbm90IGZvdW5kJylcbiAgICB9XG4gICAgXG4gICAgY29uc3QgcXVldWVJdGVtID0ge1xuICAgICAgaWQ6ICdxdWV1ZS0nICsgRGF0ZS5ub3coKSxcbiAgICAgIGNvbnRlbnRJZDogYm9keS5jb250ZW50SWQsXG4gICAgICB0aXRsZTogYFRyYWNrICR7Ym9keS5jb250ZW50SWR9YCxcbiAgICAgIGFydGlzdDogJ01vY2sgQXJ0aXN0JyxcbiAgICAgIGR1cmF0aW9uOiAxODAsIC8vIDMgbWludXRlc1xuICAgICAgYWRkZWRCeTogJ21vY2stdXNlcicsXG4gICAgICBhZGRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBwcmlvcml0eTogYm9keS5wcmlvcml0eSB8fCAwXG4gICAgfVxuICAgIFxuICAgIHNlc3Npb24ucXVldWUucHVzaChxdWV1ZUl0ZW0pXG4gICAgc2Vzc2lvbi51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICBcbiAgICByZXR1cm4geyBkYXRhOiBxdWV1ZUl0ZW0gfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVHZXRRdWV1ZSgpOiBQcm9taXNlPGFueT4ge1xuICAgIGlmICghdGhpcy5jdXJyZW50U2Vzc2lvbklkKSB7XG4gICAgICByZXR1cm4geyBkYXRhOiBbXSB9XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb25zLmdldCh0aGlzLmN1cnJlbnRTZXNzaW9uSWQpXG4gICAgcmV0dXJuIHsgZGF0YTogc2Vzc2lvbj8ucXVldWUgfHwgW10gfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVSZW1vdmVGcm9tUXVldWUocXVldWVJdGVtSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRTZXNzaW9uSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gYWN0aXZlIHNlc3Npb24nKVxuICAgIH1cbiAgICBcbiAgICBjb25zdCBzZXNzaW9uID0gdGhpcy5zZXNzaW9ucy5nZXQodGhpcy5jdXJyZW50U2Vzc2lvbklkKVxuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXNzaW9uIG5vdCBmb3VuZCcpXG4gICAgfVxuICAgIFxuICAgIHNlc3Npb24ucXVldWUgPSBzZXNzaW9uLnF1ZXVlLmZpbHRlcihpdGVtID0+IGl0ZW0uaWQgIT09IHF1ZXVlSXRlbUlkKVxuICAgIHNlc3Npb24udXBkYXRlZEF0ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgXG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZVNlYXJjaENvbnRlbnQoZW5kcG9pbnQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTCgnaHR0cDovL2xvY2FsaG9zdCcgKyBlbmRwb2ludClcbiAgICBjb25zdCBxdWVyeSA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdxJykgfHwgJydcbiAgICBjb25zdCBsaW1pdCA9IHBhcnNlSW50KHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdsaW1pdCcpIHx8ICc1MCcpXG4gICAgXG4gICAgLy8gTW9jayBzZWFyY2ggcmVzdWx0c1xuICAgIGNvbnN0IHJlc3VsdHMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBNYXRoLm1pbihsaW1pdCwgMTApIH0sIChfLCBpKSA9PiAoe1xuICAgICAgaWQ6IGBjb250ZW50LSR7aSArIDF9YCxcbiAgICAgIHRpdGxlOiBgTW9jayBUcmFjayAke2kgKyAxfWAsXG4gICAgICBhcnRpc3Q6IGBNb2NrIEFydGlzdCAke2kgKyAxfWAsXG4gICAgICBkdXJhdGlvbjogMTIwICsgKGkgKiAzMCksXG4gICAgICBhdWRpb1VybDogYC9tb2NrLWF1ZGlvL3RyYWNrLSR7aSArIDF9Lm1wM2AsXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgICBnZW5yZTogWydQb3AnLCAnUm9jaycsICdFbGVjdHJvbmljJ11baSAlIDNdLFxuICAgICAgICB5ZWFyOiAyMDIwICsgKGkgJSA0KSxcbiAgICAgICAgYnBtOiAxMjAgKyAoaSAqIDEwKSxcbiAgICAgICAga2V5OiBbJ0MnLCAnRCcsICdFJywgJ0YnLCAnRyddW2kgJSA1XVxuICAgICAgfVxuICAgIH0pKVxuICAgIFxuICAgIHJldHVybiB7IGRhdGE6IHJlc3VsdHMgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVHZXRDb250ZW50KGNvbnRlbnRJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YToge1xuICAgICAgICBpZDogY29udGVudElkLFxuICAgICAgICB0aXRsZTogYE1vY2sgVHJhY2sgJHtjb250ZW50SWR9YCxcbiAgICAgICAgYXJ0aXN0OiAnTW9jayBBcnRpc3QnLFxuICAgICAgICBkdXJhdGlvbjogMTgwLFxuICAgICAgICBhdWRpb1VybDogYC9tb2NrLWF1ZGlvLyR7Y29udGVudElkfS5tcDNgLFxuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIGdlbnJlOiAnUG9wJyxcbiAgICAgICAgICB5ZWFyOiAyMDIzLFxuICAgICAgICAgIGJwbTogMTIwLFxuICAgICAgICAgIGtleTogJ0MnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXJ0SGVhcnRiZWF0KCk6IHZvaWQge1xuICAgIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLnN5c3RlbVN0YXR1cy5sYXN0SGVhcnRiZWF0ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfSwgMzAwMDApXG4gIH1cblxuICAvLyBTaW11bGF0ZSB0cmFjayBwcm9ncmVzc2lvblxuICBzdGFydFRyYWNrUHJvZ3Jlc3Npb24oKTogdm9pZCB7XG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFNlc3Npb25JZCkge1xuICAgICAgICBjb25zdCBzZXNzaW9uID0gdGhpcy5zZXNzaW9ucy5nZXQodGhpcy5jdXJyZW50U2Vzc2lvbklkKVxuICAgICAgICBpZiAoc2Vzc2lvbj8uY3VycmVudFRyYWNrICYmIHNlc3Npb24uc3RhdHVzID09PSAnYWN0aXZlJykge1xuICAgICAgICAgIHNlc3Npb24uY3VycmVudFRyYWNrLnBvc2l0aW9uICs9IDFcbiAgICAgICAgICBpZiAoc2Vzc2lvbi5jdXJyZW50VHJhY2sucG9zaXRpb24gPj0gc2Vzc2lvbi5jdXJyZW50VHJhY2suZHVyYXRpb24pIHtcbiAgICAgICAgICAgIC8vIFRyYWNrIGZpbmlzaGVkLCBwbGF5IG5leHRcbiAgICAgICAgICAgIGlmIChzZXNzaW9uLnF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgY29uc3QgbmV4dFRyYWNrID0gc2Vzc2lvbi5xdWV1ZS5zaGlmdCgpIVxuICAgICAgICAgICAgICBzZXNzaW9uLmN1cnJlbnRUcmFjayA9IHtcbiAgICAgICAgICAgICAgICBpZDogbmV4dFRyYWNrLmlkLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBuZXh0VHJhY2sudGl0bGUsXG4gICAgICAgICAgICAgICAgYXJ0aXN0OiBuZXh0VHJhY2suYXJ0aXN0LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBuZXh0VHJhY2suZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IDBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2Vzc2lvbi5jdXJyZW50VHJhY2sgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgc2Vzc2lvbi5zdGF0dXMgPSAnaW5hY3RpdmUnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlc3Npb24udXBkYXRlZEF0ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAxMDAwKSAvLyBVcGRhdGUgZXZlcnkgc2Vjb25kXG4gIH1cbn1cblxuLy8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IG1vY2tBbXBzU2VydmVyID0gbmV3IE1vY2tBbXBzU2VydmVyKClcblxuLy8gU3RhcnQgdHJhY2sgcHJvZ3Jlc3Npb24gc2ltdWxhdGlvblxubW9ja0FtcHNTZXJ2ZXIuc3RhcnRUcmFja1Byb2dyZXNzaW9uKClcbiJdLCJuYW1lcyI6WyJNb2NrQW1wc1NlcnZlciIsImNvbnN0cnVjdG9yIiwic2Vzc2lvbnMiLCJNYXAiLCJjdXJyZW50U2Vzc2lvbklkIiwiaXNDb25uZWN0ZWQiLCJzeXN0ZW1TdGF0dXMiLCJjb25uZWN0ZWQiLCJ2ZXJzaW9uIiwiaGFyZHdhcmUiLCJhdWRpbyIsIm5ldHdvcmsiLCJzdG9yYWdlIiwiYWN0aXZlIiwidG90YWwiLCJsYXN0SGVhcnRiZWF0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiaGFuZGxlUmVxdWVzdCIsImVuZHBvaW50IiwibWV0aG9kIiwiYm9keSIsImNvbnNvbGUiLCJsb2ciLCJoYW5kbGVDb25uZWN0IiwiaGFuZGxlRGlzY29ubmVjdCIsImhhbmRsZUdldFN0YXR1cyIsImhhbmRsZUhlYXJ0YmVhdCIsImhhbmRsZUNyZWF0ZVNlc3Npb24iLCJoYW5kbGVHZXRTZXNzaW9ucyIsImhhbmRsZUdldEN1cnJlbnRTZXNzaW9uIiwiaGFuZGxlTGVhdmVTZXNzaW9uIiwiaGFuZGxlQ29udHJvbFBsYXliYWNrIiwiaGFuZGxlU2VlayIsImhhbmRsZVNldFZvbHVtZSIsImhhbmRsZUFkZFRvUXVldWUiLCJoYW5kbGVHZXRRdWV1ZSIsImhhbmRsZVNlYXJjaENvbnRlbnQiLCJzdGFydHNXaXRoIiwiaW5jbHVkZXMiLCJzZXNzaW9uSWQiLCJzcGxpdCIsImhhbmRsZUpvaW5TZXNzaW9uIiwicXVldWVJdGVtSWQiLCJoYW5kbGVSZW1vdmVGcm9tUXVldWUiLCJjb250ZW50SWQiLCJoYW5kbGVHZXRDb250ZW50IiwiRXJyb3IiLCJzdGFydEhlYXJ0YmVhdCIsInN1Y2Nlc3MiLCJkYXRhIiwiY2xpZW50SWQiLCJub3ciLCJjYXBhYmlsaXRpZXMiLCJoZWFydGJlYXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1bmRlZmluZWQiLCJzaXplIiwic2Vzc2lvbiIsImlkIiwibmFtZSIsInN0YXR1cyIsInBhcnRpY2lwYW50cyIsInF1ZXVlIiwic2V0dGluZ3MiLCJ2b2x1bWUiLCJzaHVmZmxlIiwicmVwZWF0IiwiY3JlYXRlZEF0IiwidXBkYXRlZEF0Iiwic2V0IiwiZ2V0IiwiTWF0aCIsIm1heCIsImFjdGlvbiIsImN1cnJlbnRUcmFjayIsImxlbmd0aCIsIm5leHRUcmFjayIsInRpdGxlIiwiYXJ0aXN0IiwiZHVyYXRpb24iLCJwb3NpdGlvbiIsInNoaWZ0IiwibWluIiwicXVldWVJdGVtIiwiYWRkZWRCeSIsImFkZGVkQXQiLCJwcmlvcml0eSIsInB1c2giLCJmaWx0ZXIiLCJpdGVtIiwidXJsIiwiVVJMIiwicXVlcnkiLCJzZWFyY2hQYXJhbXMiLCJsaW1pdCIsInBhcnNlSW50IiwicmVzdWx0cyIsIkFycmF5IiwiZnJvbSIsIl8iLCJpIiwiYXVkaW9VcmwiLCJtZXRhZGF0YSIsImdlbnJlIiwieWVhciIsImJwbSIsImtleSIsInNldEludGVydmFsIiwic3RhcnRUcmFja1Byb2dyZXNzaW9uIiwibW9ja0FtcHNTZXJ2ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./lib/mock-amps-server.ts\n");

/***/ })

};
;