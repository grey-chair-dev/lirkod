"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_mock-amps-server_ts"],{

/***/ "(app-pages-browser)/./lib/mock-amps-server.ts":
/*!*********************************!*\
  !*** ./lib/mock-amps-server.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MockAmpsServer: function() { return /* binding */ MockAmpsServer; },\n/* harmony export */   mockAmpsServer: function() { return /* binding */ mockAmpsServer; }\n/* harmony export */ });\n// Mock AMPS Server for Development and Testing\n// This simulates a real AMPS system for development purposes\nclass MockAmpsServer {\n    // Simulate API endpoints\n    async handleRequest(endpoint, method, body) {\n        console.log(\"Mock AMPS API: \".concat(method, \" \").concat(endpoint));\n        switch(endpoint){\n            case \"/api/connect\":\n                return this.handleConnect(body);\n            case \"/api/disconnect\":\n                return this.handleDisconnect();\n            case \"/api/status\":\n                return this.handleGetStatus();\n            case \"/api/heartbeat\":\n                return this.handleHeartbeat();\n            case \"/api/sessions\":\n                if (method === \"POST\") {\n                    return this.handleCreateSession(body);\n                }\n                return this.handleGetSessions();\n            case \"/api/sessions/current\":\n                return this.handleGetCurrentSession();\n            case \"/api/sessions/leave\":\n                return this.handleLeaveSession();\n            case \"/api/sessions/control\":\n                return this.handleControlPlayback(body);\n            case \"/api/sessions/seek\":\n                return this.handleSeek(body);\n            case \"/api/sessions/volume\":\n                return this.handleSetVolume(body);\n            case \"/api/sessions/queue\":\n                if (method === \"POST\") {\n                    return this.handleAddToQueue(body);\n                }\n                return this.handleGetQueue();\n            case \"/api/content/search\":\n                return this.handleSearchContent(endpoint);\n            default:\n                if (endpoint.startsWith(\"/api/sessions/\") && endpoint.includes(\"/join\")) {\n                    const sessionId = endpoint.split(\"/\")[3];\n                    return this.handleJoinSession(sessionId);\n                }\n                if (endpoint.startsWith(\"/api/sessions/queue/\") && method === \"DELETE\") {\n                    const queueItemId = endpoint.split(\"/\")[4];\n                    return this.handleRemoveFromQueue(queueItemId);\n                }\n                if (endpoint.startsWith(\"/api/content/\")) {\n                    const contentId = endpoint.split(\"/\")[3];\n                    return this.handleGetContent(contentId);\n                }\n                throw new Error(\"Unknown endpoint: \".concat(endpoint));\n        }\n    }\n    async handleConnect(body) {\n        this.isConnected = true;\n        this.systemStatus.connected = true;\n        this.startHeartbeat();\n        return {\n            success: true,\n            data: {\n                clientId: \"mock-client-\" + Date.now(),\n                capabilities: body.capabilities || []\n            }\n        };\n    }\n    async handleDisconnect() {\n        this.isConnected = false;\n        this.systemStatus.connected = false;\n        this.currentSessionId = null;\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval);\n            this.heartbeatInterval = undefined;\n        }\n        return {\n            success: true\n        };\n    }\n    async handleGetStatus() {\n        this.systemStatus.lastHeartbeat = new Date().toISOString();\n        this.systemStatus.sessions.active = this.sessions.size;\n        this.systemStatus.sessions.total = this.sessions.size;\n        return {\n            data: this.systemStatus\n        };\n    }\n    async handleHeartbeat() {\n        this.systemStatus.lastHeartbeat = new Date().toISOString();\n        return {\n            success: true\n        };\n    }\n    async handleCreateSession(body) {\n        const sessionId = \"session-\" + Date.now();\n        const session = {\n            id: sessionId,\n            name: body.name || \"New Session\",\n            status: \"active\",\n            participants: 1,\n            queue: [],\n            settings: {\n                volume: 80,\n                shuffle: false,\n                repeat: false,\n                ...body.settings\n            },\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        this.sessions.set(sessionId, session);\n        this.currentSessionId = sessionId;\n        return {\n            data: session\n        };\n    }\n    async handleJoinSession(sessionId) {\n        const session = this.sessions.get(sessionId);\n        if (!session) {\n            throw new Error(\"Session not found\");\n        }\n        session.participants++;\n        session.updatedAt = new Date().toISOString();\n        this.currentSessionId = sessionId;\n        return {\n            data: session\n        };\n    }\n    async handleGetCurrentSession() {\n        if (!this.currentSessionId) {\n            return {\n                data: null\n            };\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        return {\n            data: session || null\n        };\n    }\n    async handleLeaveSession() {\n        if (this.currentSessionId) {\n            const session = this.sessions.get(this.currentSessionId);\n            if (session) {\n                session.participants = Math.max(0, session.participants - 1);\n                session.updatedAt = new Date().toISOString();\n            }\n            this.currentSessionId = null;\n        }\n        return {\n            success: true\n        };\n    }\n    async handleControlPlayback(body) {\n        if (!this.currentSessionId) {\n            throw new Error(\"No active session\");\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        if (!session) {\n            throw new Error(\"Session not found\");\n        }\n        switch(body.action){\n            case \"play\":\n                session.status = \"active\";\n                if (!session.currentTrack && session.queue.length > 0) {\n                    const nextTrack = session.queue[0];\n                    session.currentTrack = {\n                        id: nextTrack.id,\n                        title: nextTrack.title,\n                        artist: nextTrack.artist,\n                        duration: nextTrack.duration,\n                        position: 0\n                    };\n                }\n                break;\n            case \"pause\":\n                session.status = \"paused\";\n                break;\n            case \"stop\":\n                session.status = \"inactive\";\n                session.currentTrack = undefined;\n                break;\n            case \"next\":\n                if (session.queue.length > 0) {\n                    const nextTrack = session.queue[0];\n                    session.currentTrack = {\n                        id: nextTrack.id,\n                        title: nextTrack.title,\n                        artist: nextTrack.artist,\n                        duration: nextTrack.duration,\n                        position: 0\n                    };\n                    session.queue.shift();\n                }\n                break;\n            case \"previous\":\n                // Simple implementation - just restart current track\n                if (session.currentTrack) {\n                    session.currentTrack.position = 0;\n                }\n                break;\n        }\n        session.updatedAt = new Date().toISOString();\n        return {\n            success: true\n        };\n    }\n    async handleSeek(body) {\n        if (!this.currentSessionId) {\n            throw new Error(\"No active session\");\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        if (!session || !session.currentTrack) {\n            throw new Error(\"No active track\");\n        }\n        session.currentTrack.position = Math.max(0, Math.min(body.position, session.currentTrack.duration));\n        session.updatedAt = new Date().toISOString();\n        return {\n            success: true\n        };\n    }\n    async handleSetVolume(body) {\n        if (!this.currentSessionId) {\n            throw new Error(\"No active session\");\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        if (!session) {\n            throw new Error(\"Session not found\");\n        }\n        session.settings.volume = Math.max(0, Math.min(100, body.volume));\n        session.updatedAt = new Date().toISOString();\n        return {\n            success: true\n        };\n    }\n    async handleAddToQueue(body) {\n        if (!this.currentSessionId) {\n            throw new Error(\"No active session\");\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        if (!session) {\n            throw new Error(\"Session not found\");\n        }\n        const queueItem = {\n            id: \"queue-\" + Date.now(),\n            contentId: body.contentId,\n            title: \"Track \".concat(body.contentId),\n            artist: \"Mock Artist\",\n            duration: 180,\n            addedBy: \"mock-user\",\n            addedAt: new Date().toISOString(),\n            priority: body.priority || 0\n        };\n        session.queue.push(queueItem);\n        session.updatedAt = new Date().toISOString();\n        return {\n            data: queueItem\n        };\n    }\n    async handleGetQueue() {\n        if (!this.currentSessionId) {\n            return {\n                data: []\n            };\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        return {\n            data: (session === null || session === void 0 ? void 0 : session.queue) || []\n        };\n    }\n    async handleRemoveFromQueue(queueItemId) {\n        if (!this.currentSessionId) {\n            throw new Error(\"No active session\");\n        }\n        const session = this.sessions.get(this.currentSessionId);\n        if (!session) {\n            throw new Error(\"Session not found\");\n        }\n        session.queue = session.queue.filter((item)=>item.id !== queueItemId);\n        session.updatedAt = new Date().toISOString();\n        return {\n            success: true\n        };\n    }\n    async handleSearchContent(endpoint) {\n        const url = new URL(\"http://localhost\" + endpoint);\n        const query = url.searchParams.get(\"q\") || \"\";\n        const limit = parseInt(url.searchParams.get(\"limit\") || \"50\");\n        // Mock search results\n        const results = Array.from({\n            length: Math.min(limit, 10)\n        }, (_, i)=>({\n                id: \"content-\".concat(i + 1),\n                title: \"Mock Track \".concat(i + 1),\n                artist: \"Mock Artist \".concat(i + 1),\n                duration: 120 + i * 30,\n                audioUrl: \"/mock-audio/track-\".concat(i + 1, \".mp3\"),\n                metadata: {\n                    genre: [\n                        \"Pop\",\n                        \"Rock\",\n                        \"Electronic\"\n                    ][i % 3],\n                    year: 2020 + i % 4,\n                    bpm: 120 + i * 10,\n                    key: [\n                        \"C\",\n                        \"D\",\n                        \"E\",\n                        \"F\",\n                        \"G\"\n                    ][i % 5]\n                }\n            }));\n        return {\n            data: results\n        };\n    }\n    async handleGetContent(contentId) {\n        return {\n            data: {\n                id: contentId,\n                title: \"Mock Track \".concat(contentId),\n                artist: \"Mock Artist\",\n                duration: 180,\n                audioUrl: \"/mock-audio/\".concat(contentId, \".mp3\"),\n                metadata: {\n                    genre: \"Pop\",\n                    year: 2023,\n                    bpm: 120,\n                    key: \"C\"\n                }\n            }\n        };\n    }\n    startHeartbeat() {\n        this.heartbeatInterval = setInterval(()=>{\n            this.systemStatus.lastHeartbeat = new Date().toISOString();\n        }, 30000);\n    }\n    // Simulate track progression\n    startTrackProgression() {\n        setInterval(()=>{\n            if (this.currentSessionId) {\n                const session = this.sessions.get(this.currentSessionId);\n                if ((session === null || session === void 0 ? void 0 : session.currentTrack) && session.status === \"active\") {\n                    session.currentTrack.position += 1;\n                    if (session.currentTrack.position >= session.currentTrack.duration) {\n                        // Track finished, play next\n                        if (session.queue.length > 0) {\n                            const nextTrack = session.queue.shift();\n                            session.currentTrack = {\n                                id: nextTrack.id,\n                                title: nextTrack.title,\n                                artist: nextTrack.artist,\n                                duration: nextTrack.duration,\n                                position: 0\n                            };\n                        } else {\n                            session.currentTrack = undefined;\n                            session.status = \"inactive\";\n                        }\n                    }\n                    session.updatedAt = new Date().toISOString();\n                }\n            }\n        }, 1000) // Update every second\n        ;\n    }\n    constructor(){\n        this.sessions = new Map();\n        this.currentSessionId = null;\n        this.isConnected = false;\n        this.systemStatus = {\n            connected: false,\n            version: \"1.0.0-mock\",\n            hardware: {\n                audio: \"connected\",\n                network: \"connected\",\n                storage: \"available\"\n            },\n            sessions: {\n                active: 0,\n                total: 0\n            },\n            lastHeartbeat: new Date().toISOString()\n        };\n    }\n}\n// Export singleton instance\nconst mockAmpsServer = new MockAmpsServer();\n// Start track progression simulation\nmockAmpsServer.startTrackProgression();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/mock-amps-server.ts\n"));

/***/ })

}]);