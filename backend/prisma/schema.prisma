// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  displayName   String?
  password      String?
  avatar        String?
  bio           String?
  isVerified    Boolean   @default(false)
  isPremium     Boolean   @default(false)
  premiumExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  playlists     Playlist[]
  following     Follow[]  @relation("UserFollowing")
  followers     Follow[]  @relation("UserFollowers")
  likes         Like[]
  comments      Comment[]
  listeningHistory ListeningHistory[]
  sessions      Session[]
  notifications Notification[]
  devices       Device[]
  artistFollows ArtistFollow[]

  @@map("users")
}

model Artist {
  id          String   @id @default(cuid())
  name        String
  bio         String?
  avatar      String?
  coverImage  String?
  isVerified  Boolean  @default(false)
  monthlyListeners Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  albums      Album[]
  songs       Song[]
  followers   ArtistFollow[]

  @@map("artists")
}

model Album {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  releaseDate DateTime
  genre       String?
  isExplicit  Boolean  @default(false)
  totalTracks Int      @default(0)
  duration    Int      @default(0) // in seconds
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  artistId    String
  artist      Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  songs       Song[]

  @@map("albums")
}

model Song {
  id          String   @id @default(cuid())
  title       String
  duration    Int      // in seconds
  trackNumber Int?
  audioUrl    String
  previewUrl  String?
  isExplicit  Boolean  @default(false)
  playCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  albumId     String
  album       Album   @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artistId    String
  artist      Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  playlists   PlaylistSong[]
  likes       Like[]
  comments    Comment[]
  listeningHistory ListeningHistory[]

  @@map("songs")
}

model Playlist {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  isPublic    Boolean  @default(true)
  isCollaborative Boolean @default(false)
  totalTracks Int      @default(0)
  duration    Int      @default(0) // in seconds
  playCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs       PlaylistSong[]
  likes       Like[]
  comments    Comment[]

  @@map("playlists")
}

model PlaylistSong {
  id         String @id @default(cuid())
  position   Int
  addedAt    DateTime @default(now())

  // Relations
  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  songId     String
  song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@map("playlist_songs")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  songId    String?
  song      Song?    @relation(fields: [songId], references: [id], onDelete: Cascade)
  playlistId String?
  playlist  Playlist? @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@unique([userId, playlistId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  songId    String?
  song      Song?    @relation(fields: [songId], references: [id], onDelete: Cascade)
  playlistId String?
  playlist  Playlist? @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  followerId String
  follower   User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model ArtistFollow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  artistId  String
  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([userId, artistId])
  @@map("artist_follows")
}

model ListeningHistory {
  id        String   @id @default(cuid())
  playedAt  DateTime @default(now())
  duration  Int      // how long the song was played in seconds

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  songId    String
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@map("listening_history")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // 'like', 'follow', 'comment', 'new_release'
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Device {
  id        String   @id @default(cuid())
  name      String
  type      String   // 'mobile', 'desktop', 'web', 'smart_speaker'
  isActive  Boolean  @default(true)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("devices")
}

model Podcast {
  id          String   @id @default(cuid())
  title       String
  description String?
  coverImage  String?
  author      String
  category    String?
  language    String   @default("en")
  isExplicit  Boolean  @default(false)
  totalEpisodes Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  episodes    PodcastEpisode[]

  @@map("podcasts")
}

model PodcastEpisode {
  id          String   @id @default(cuid())
  title       String
  description String?
  audioUrl    String
  duration    Int      // in seconds
  episodeNumber Int?
  publishDate DateTime
  playCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  podcastId   String
  podcast     Podcast  @relation(fields: [podcastId], references: [id], onDelete: Cascade)

  @@map("podcast_episodes")
}
